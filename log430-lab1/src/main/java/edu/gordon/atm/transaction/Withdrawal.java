/* * ATM Example system - file Withdrawal.java     * * copyright (c) 2001 - Russell C. Bjork * */ package edu.gordon.atm.transaction;import edu.gordon.atm.physical.CustomerConsole;import edu.gordon.atm.physical.AtmComponents;import edu.gordon.banking.AccountInformation;import edu.gordon.banking.Card;import edu.gordon.banking.Message;import edu.gordon.banking.Money;import edu.gordon.banking.Receipt;import edu.gordon.banking.Status;/** Representation for a cash withdrawal transaction */public class Withdrawal extends Transaction{    /** Constructor     *     *  @param edu.gordon.atm the ATM used to communicate with customer     *  @param session the session in which the transaction is being performed     *  @param card the customer's card     *  @param pin the PIN entered by the customer     */    public Withdrawal(AtmComponents physicalComponents, Card card, int pin, int id,            String place, String bankName)    {        super(physicalComponents, card, pin, id, place, bankName);    }        /** Get specifics for the transaction from the customer     *     *  @return message to bank for initiating this transaction     *  @exception CustomerConsole.Cancelled if customer cancelled this transaction     */    protected Message getSpecificsFromCustomer() throws CustomerConsole.Cancelled    {        from = physicalComponents.getCustomerConsole().readMenuChoice(            "Account to withdraw from",            AccountInformation.ACCOUNT_NAMES);        String [] amountOptions = { "$20", "$40", "$60", "$100", "$200" };        Money [] amountValues = {                                   new Money(20), new Money(40), new Money(60),                                  new Money(100), new Money(200)                                };                                          String amountMessage = "";        boolean validAmount = false;                while (! validAmount)        {            amount = amountValues [                 physicalComponents.getCustomerConsole().readMenuChoice(                    amountMessage + "Amount of cash to withdraw", amountOptions) ];                                        validAmount = physicalComponents.getCashDispenser().checkCashOnHand(amount.getValueCents());            if (! validAmount)                amountMessage = "Insufficient cash available\n";        }                return new Message(Message.WITHDRAWAL,                            card.getNumber(), pin, serialNumber, from, -1, amount.getDollarsCents());    }        /** Complete an approved transaction     *     *  @return receipt to be printed for this transaction     */    public Receipt completeTransaction(Message specifics)    {        amount = specifics.getAmount();                message = specifics;                physicalComponents.getCashDispenser().dispenseCash(amount.getValueCents());        return new Receipt(id, place , bankName,                 this.card, this.getSerialNumber(), this.balances) {            {                detailsPortion = new String[2];                detailsPortion[0] = "WITHDRAWAL FROM: " +                                     AccountInformation.ACCOUNT_ABBREVIATIONS[from];                detailsPortion[1] = "AMOUNT: " + amount.toString();            }        };    }        public Status connectToBank(){                String[] answer = new String[3];                answer = physicalComponents.getNetworkToBank().sendMessage(            message.toString(), Message.WITHDRAWAL,                        card.getNumber(), pin, serialNumber, from, -1, amount.getDollarsCents(),             balances.getTotal().getValueCents(), balances.getAvailable().getValueCents());                Status status = convertToStatus(answer[0]);                        balances.setBalances(new Money(0,Integer.parseInt(answer[1])),                new Money(0,Integer.parseInt(answer[2])));                return status;    }        /** Account to withdraw from     */     private int from;        /** Amount of money to withdraw     */    private Money amount;           }