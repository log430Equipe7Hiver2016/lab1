/* * ATM Example system - file Deposit.java    * * copyright (c) 2001 - Russell C. Bjork * */ package edu.gordon.atm.transaction;import edu.gordon.atm.physical.*;import edu.gordon.banking.AccountInformation;import edu.gordon.banking.Card;import edu.gordon.banking.Message;import edu.gordon.banking.Money;import edu.gordon.banking.Receipt;import edu.gordon.banking.Status;/** Representation for a deposit transaction */public class Deposit extends Transaction{    /** Constructor     *     *  @param edu.gordon.atm the ATM used to communicate with customer     *  @param session the session in which the transaction is being performed     *  @param card the customer's card     *  @param pin the PIN entered by the customer     */    public Deposit(AtmComponents physicalComponents, Card card, int pin, int id,            String place, String bankName)    {        super(physicalComponents, card, pin, id, place, bankName);    }        /** Get specifics for the transaction from the customer     *     *  @return message to bank for initiating this transaction     *  @exception CustomerConsole.Cancelled if customer cancelled this transaction     */    protected Message getSpecificsFromCustomer() throws CustomerConsole.Cancelled    {        to = physicalComponents.getCustomerConsole().readMenuChoice(            "Account to deposit to",            AccountInformation.ACCOUNT_NAMES);        int[] cash = physicalComponents.getCustomerConsole().readAmount("Amount to deposit");                //amount = new Money(cash[0], cash[1]);                return new Message(Message.INITIATE_DEPOSIT,                           card.getNumber(), pin, serialNumber, -1, to, cash);    }        /** Complete an approved transaction     *     *  @return receipt to be printed for this transaction     *  @exception CustomerConsole.Cancelled if customer cancelled or      *             transaction timed out     */    public Receipt completeTransaction(Message specifics) throws CustomerConsole.Cancelled    {                to = specifics.getToAccount();                amount = specifics.getAmount();                Message message = new Message(Message.COMPLETE_DEPOSIT,                        card.getNumber(), pin, serialNumber, -1, to, amount.getDollarsCents());                physicalComponents.getEnvelopeAcceptor().acceptEnvelope();                Status status = connectToBank();                    return new Receipt(id, place , bankName,                 this.card, this.getSerialNumber(), this.balances) {            {                detailsPortion = new String[2];                detailsPortion[0] = "DEPOSIT TO: " +                                     AccountInformation.ACCOUNT_ABBREVIATIONS[to];                detailsPortion[1] = "AMOUNT: " + amount.toString();            }        };    }        /** Account to deposit to     */     private int to;        /** Amount of money to deposit     */    private Money amount;        protected Status connectToBank(){                Status status = convertToStatus(physicalComponents.getNetworkToBank().sendMessage(            message.toString(), Message.COMPLETE_DEPOSIT,                        card.getNumber(), pin, serialNumber, -1, to, amount.getDollarsCents(),             balances.getTotal().getValueCents(), balances.getAvailable().getValueCents()));                return status;    }            }