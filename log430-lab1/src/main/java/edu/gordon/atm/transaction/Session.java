/* * ATM Example system - file Session.java * * copyright (c) 2001 - Russell C. Bjork * */ package edu.gordon.atm.transaction;import edu.gordon.event.PerformTransactionEvent;import edu.gordon.event.ReadPinEvent;import edu.gordon.event.ChooseTransactionEvent;import edu.gordon.event.ReadCardEvent;import edu.gordon.atm.physical.*;import edu.gordon.banking.Card;import com.google.common.eventbus.EventBus;/** Representation for one ATM session serving a single customer. */public class Session{    /** Constructor     *     *  @param edu.gordon.atm the ATM on which the session is performed     */    public Session(AtmComponents physicalComponents, int id, String place,            String bankName)    {        this.physicalComponents = physicalComponents;        this.id = id;        this.place = place;        this.bankName = bankName;    }        /** Perform the Session Use Case     */    public void performSession()    {        EventBus eventBus = new EventBus();        eventBus.register(new ReadCardComponent());        eventBus.register(new ReadPinComponent());        eventBus.register(new ChooseTransactionComponent());        eventBus.register(new PerformTransactionComponent());        eventBus.register(new EjectCardComponent());                actionState = READING_CARD_STATE;                while (actionState != FINAL_STATE)        {            switch(actionState)            {                case READING_CARD_STATE:                                        eventBus.post(new ReadCardEvent(this));                    break;                                    case READING_PIN_STATE:                                        eventBus.post(new ReadPinEvent(this));                    break;                                case CHOOSING_TRANSACTION_STATE:                                    eventBus.post(new ChooseTransactionEvent(this));                    break;                                    case PERFORMING_TRANSACTION_STATE:                                    eventBus.post(new PerformTransactionEvent(this));                    break;                                    case EJECTING_CARD_STATE:                                    eventBus.post(new EjectCardEvent(this));                    break;            }        }    }        /** Change the pin recorded for the customer (if invalid pin extension     *  was performed by a transaction     *     *  @param pin the newly entered pin     */    public void setPIN(int pin)    {        this.pin = pin;    }        public int getPIN(){        return pin;    }        public void setChoosingState(){        actionState = CHOOSING_TRANSACTION_STATE;    }        public void setPerformingState(){        actionState = PERFORMING_TRANSACTION_STATE;    }        public void setReadingCardState(){        actionState = READING_CARD_STATE;    }        public void setReadingPINState(){        actionState = READING_PIN_STATE;    }        public void setEjectingCardState(){        actionState = EJECTING_CARD_STATE;    }        public void setFinalState(){        actionState = FINAL_STATE;    }        public void setCard(Card card){        this.card = card;    }        public void setTransaction(Transaction transaction){        currentTransaction = transaction;    }        public AtmComponents getComponents(){        return physicalComponents;    }        public Card getCard(){        return card;    }        public int getId(){        return id;    }        public String getPlace(){        return place;    }        public String getBankName(){        return bankName;    }        public Transaction getTransaction(){        return currentTransaction;    }    // Instance variables        /** The PIN entered (or re-entered) by the customer     */    private int pin;        /** The current state of the session     */    private int actionState;            // Possible values for state        /** Reading the customer's card     */    private static final int READING_CARD_STATE = 1;        /** Asking the customer to enter a PIN     */    private static final int READING_PIN_STATE = 2;        /** Asking the customer to choose a transaction type     */    private static final int CHOOSING_TRANSACTION_STATE = 3;        /** Peforming a transaction     */    private static final int PERFORMING_TRANSACTION_STATE = 4;        /** Ejecting the customer's card     */    private static final int EJECTING_CARD_STATE = 5;        /** Session finished     */    private static final int FINAL_STATE = 6;        private AtmComponents physicalComponents;        private int id;        private String place;        private String bankName;        private Card card;        private Transaction currentTransaction;    }