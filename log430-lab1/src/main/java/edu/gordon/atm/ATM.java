/* * ATM Example system - file ATM.java * * copyright (c) 2001 - Russell C. Bjork * */ package edu.gordon.atm;import edu.gordon.atm.physical.NetworkToBank;import edu.gordon.atm.transaction.ATMService; //test, to delete if circular again...import edu.gordon.atm.transaction.Session;import edu.gordon.atm.physical.*;import edu.gordon.banking.Card;import edu.gordon.event.ATMEvent;import com.google.common.eventbus.Subscribe;import java.net.InetAddress;/** Representation for the ATM itself.  An object of this class "owns" *  the objects representing the component parts of the ATM, and the *  communications network, and is responsible for creating customer  *  sessions which then use it to gain access to the component parts. *  This is an active class - when an instance of the class is created, *  a thread is executed that actually runs the system. */ public class ATM{	    /** The ATM is off.  The switch must be turned on before it can operate     */    private static final int OFF_STATE = 0;        /** The ATM is on, but idle.  It can service a customer, or it can be shut down     */    private static final int IDLE_STATE = 1;        /** The ATM is servicing a customer.     */    private static final int SERVING_CUSTOMER_STATE = 2;				/** Constructor     *     *  @param id the unique ID for this ATM     *  @param place the physical location of this ATM     *  @param bankName the name of the bank owning this ATM     *  @param bankAddress the Internet address of the bank     */    public ATM(int id, String place, String bankName, InetAddress bankAddress)    {    	        this.id = id;        this.place = place;        this.bankName = bankName;        this.bankAddress = bankAddress;                // Create objects corresponding to component parts                       log = new Log();        cardReader = new CardReader();        cashDispenser = new CashDispenser(log);        customerConsole = new CustomerConsole();        envelopeAcceptor = new EnvelopeAcceptor(log);        networkToBank = new NetworkToBank(log, bankAddress);        operatorPanel = new OperatorPanel();        receiptPrinter = new ReceiptPrinter();                                               physicalComponents = new AtmComponents(cardReader, cashDispenser, customerConsole,        envelopeAcceptor, operatorPanel, receiptPrinter, networkToBank);                      }            // Methods corresponding to major responsibilities of the ATM        @Subscribe     public void handleEvent(ATMEvent evt){    	    	    	    	ATMService tmp = (ATMService)( evt.getSource() );    	    	if(tmp.getState() == OFF_STATE){    		    		this.customerConsole.display("Not currently available");    		    	}    	else{    		    		this.customerConsole.display("Please insert your card");    		    	}    	    	    }                        // The following methods allow objects of other classes to access component    // parts of the ATM             /** Accessor for id     *     *  @return unique id of this ATM     */    public int getID()    {        return id;    }       	/** Accessor for place     *     *  @return physical location of this ATM     */    public String getPlace()    {        return place;    }        /** Accessor for bank name     *     *  @return name of bank owning this ATM     */    public String getBankName()    {        return bankName;    }        /** Accessor for card reader     *     *  @return card reader component of this ATM     */    public CardReader getCardReader()    {        return cardReader;    }        /** Accessor for cash dispenser     *     *  @return cash dispenser component of this ATM     */    public CashDispenser getCashDispenser()    {        return cashDispenser;    }        /** Accessor for customer console      *     *  @return customer console component of this ATM     */    public CustomerConsole getCustomerConsole()    {        return customerConsole;    }        /** Accessor for envelope acceptor     *     *  @return envelope acceptor component of this ATM     */    public EnvelopeAcceptor getEnvelopeAcceptor()    {        return envelopeAcceptor;    }        /** Accessor for log     *     *  @return log component of this ATM     */    public Log getLog()    {        return log;    }        /** Accessor for network to bank     *     *  @return network connection to bank of this ATM     */    public NetworkToBank getNetworkToBank()    {        return networkToBank;    }        /** Accessor for operator panel     *     *  @return operator panel component of this ATM     */    public OperatorPanel getOperatorPanel()    {        return operatorPanel;    }        /** Accessor for receipt printer     *     *  @return receipt printer component of this ATM     */    public ReceiptPrinter getReceiptPrinter()    {        return receiptPrinter;    }    // Private methods    /** Perform the System Startup use case when switch is turned on     */                public AtmComponents getComponents(){        return physicalComponents;    }                    // Instance variables recording information about the ATM            /** Unique ID for this ATM     */    private int id;        /** Physical location of this ATM     */    private String place;        /** Name of the bank owning this ATM     */    private String bankName;        /** Internet address of the bank     */    private InetAddress bankAddress;            // Instance variables referring to the component parts of the ATM        /** The ATM's card reader     */    private CardReader cardReader;        /** The ATM's cash dispenser     */    private CashDispenser cashDispenser;        /** The ATM's customer console     */    private CustomerConsole customerConsole;        /** The ATM's envelope acceptor     */    private EnvelopeAcceptor envelopeAcceptor;        /** The ATM's log     */    private Log log;        /** The ATM's network connection to the bank     */    private NetworkToBank networkToBank;        /** The ATM's operator panel     */    private OperatorPanel operatorPanel;        /** The ATM's receipt printer     */    private ReceiptPrinter receiptPrinter;        // State information            private AtmComponents physicalComponents;    // Possible values for state                    }